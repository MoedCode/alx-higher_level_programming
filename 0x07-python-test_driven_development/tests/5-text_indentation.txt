>>> text_indentation = __import__('5-text_indentation').text_indentation



Case no delim:
    >>> text_indentation("Hello String")
    Hello String

Case string with spaces:
    >>> text_indentation("String          ")
    String

Case string with spaces 2:
    >>> text_indentation("        String")
    String

Case string with spaces 3:
    >>> text_indentation("        String          ")
    String

Case string with empty string:
    >>> text_indentation("")

Case string with empty string 2:
    >>> text_indentation("      ")

Case simple:
    >>> text_indentation("Hello: String")
    Hello:
    <BLANKLINE>
    String

Case delims with spaces:
    >>> text_indentation("      ?:  :  ")
    ?
    <BLANKLINE>
    :
    <BLANKLINE>
    :
    <BLANKLINE>

Case newline:
    >>> text_indentation("\n")
    <BLANKLINE>

Case newline 2:
    >>> text_indentation("\n\n")
    <BLANKLINE>
    <BLANKLINE>

Case newline 3:
    >>> text_indentation("Hello\n\n")
    Hello
    <BLANKLINE>

Case all delimeters:
    >>> text_indentation("Hello: String? school. fooo")
    Hello:
    <BLANKLINE>
    String?
    <BLANKLINE>
    school.
    <BLANKLINE>
    fooo


Case just delimeters:
    >>> text_indentation(".?:")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

Case just delimeters 2:
    >>> text_indentation("     ?   ")
    ?
    <BLANKLINE>

Case nonindent inside indent
    >>> text_indentation("?Hello.")
    ?
    <BLANKLINE>
    Hello.
    <BLANKLINE>

Case existing newlines:
    >>> text_indentation("?\n\n.\n\n:")
    ?
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    .
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    :
    <BLANKLINE>

Case none:
    >>> text_indentation(None)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string

Case number:
    >>> text_indentation(33)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string
